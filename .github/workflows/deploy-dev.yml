name: deploy about dev profile
on:
  workflow_dispatch:
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DOCKERHUB_REPOSITORY: ${{ secrets.DOCKERHUB_REPOSITORY }}
  SLACK_DEPLOY_NOTIFICATION_URL: ${{ secrets.SLACK_DEPLOY_NOTIFICATION_URL }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ./.gradle/caches
            ./.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: gradle
      - name: Grant execute permission to gradlew
        run: chmod +x gradlew
      - name: Build with Gradle without test
        run: ./gradlew clean build -x test
        shell: bash
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build
  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: gradle
      - name: Grant execute permission to gradlew
        run: chmod +x gradlew
      - name: Test with Gradle
        run: ./gradlew test
        shell: bash
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: build
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile-dev
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY }}:latest
      # Configure to AWS
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=tag:Name,Values=BuilzerApp-dev" \
            --parameters 'commands=#!/bin/bash
            docker pull ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY }}:latest
            docker stop builzer-batch || true
            docker rm builzer-batch || true
            docker run -d -p 8081:8081 --network builzer-network --name builzer-batch ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKERHUB_REPOSITORY }}:latest' \
            --comment "Deploying Docker container to EC2 via SSM" \
            --timeout-seconds 600
      - name: Send Successful deployment message to slack channel
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#배포-모니터링
          \", \"username\": \"배포 완료 알림\", \"text\": \"[환경]: dev\n[모듈]: builzer-batch\"}" ${{ env.SLACK_DEPLOY_NOTIFICATION_URL }}
  success-notification:
    runs-on: ubuntu-latest
    needs: [ build, test, deploy ]
    if: success()
    steps:
      - name: Send Successful deployment message to slack channel
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#배포-모니터링
          \", \"username\": \"배포 완료 알림\", \"text\": \"[환경]: dev\n[모듈]: builzer-batch\"}" ${{ env.SLACK_DEPLOY_NOTIFICATION_URL }}
  failure-notification:
    runs-on: ubuntu-latest
    needs: [ build, test, deploy ]
    if: failure()
    steps:
      - name: Send Failure deployment message to slack channel
        run: |
          curl -X POST --data-urlencode "payload={\"channel\": \"#배포-모니터링
          \", \"username\": \"배포 실패 알림\", \"text\": \"[환경]: dev\n[모듈]: builzer-batch\"}" ${{ env.SLACK_DEPLOY_NOTIFICATION_URL }}